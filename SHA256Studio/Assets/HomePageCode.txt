
Microsoft Visual Studio Community 2019
Version 16.9.4


Calculate hash using C#

//initial hash values
uint h0, h1, h2, h3, h4, h5, h6, h7;

private string SHA256CalculateHash(string rawInput)
{
    #region read input
    StringBuilder inputBinaryStringBuilder = new StringBuilder();

    byte[] inputBytes = Encoding.UTF8.GetBytes(rawInput);

    foreach (byte inputByte in inputBytes)
    {
        inputBinaryStringBuilder.Append(Convert.ToString(inputByte, 2).PadLeft(8, '0'));
    }

    //does not pad left to 8 bits
    string binaryInputLengthAsBinary = Convert.ToString(inputBinaryStringBuilder.Length, 2);

    //to separate input from rest -> add '1'
    inputBinaryStringBuilder.Append('1');

    while ((inputBinaryStringBuilder.Length + 64) % 512 != 0)
    {
        //up to 448 bits
        inputBinaryStringBuilder.Append('0');
    }

    //64 bits (448 + 64 = 512)
    inputBinaryStringBuilder.Append(binaryInputLengthAsBinary.PadLeft(64, '0'));
    #endregion read input

    #region message blocks
    int messageBlockCount = inputBinaryStringBuilder.Length / 512;

    string[] messageBlocks = new string[messageBlockCount];

    for (int i = 0; i < messageBlockCount; i++)
    {
        messageBlocks[i] = inputBinaryStringBuilder.ToString().Substring(i * 512, 512);
    }
    #endregion message blocks

    #region create message scheduler and compress
    //initial hash values
    h0 = 0x6a09e667;
    h1 = 0xbb67ae85;
    h2 = 0x3c6ef372;
    h3 = 0xa54ff53a;
    h4 = 0x510e527f;
    h5 = 0x9b05688c;
    h6 = 0x1f83d9ab;
    h7 = 0x5be0cd19;

    //round constants (64 rounds)
    uint[] K = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
    };

    // working registers
    uint a, b, c, d, e, f, g, h;

    for (int m = 0; m < messageBlocks.Length; m++)
    {
        //initialized or from an earlier round
        a = h0;
        b = h1;
        c = h2;
        d = h3;
        e = h4;
        f = h5;
        g = h6;
        h = h7;

        #region message scheduler
        uint[] messageScheduler = new uint[64];

        for (int i = 0; i < 16; i++)
        {
            messageScheduler[i] = Convert.ToUInt32(messageBlocks[m].Substring(i * 32, 32), 2);
        }

        for (int t = 16; t < 64; t++)
        {
            //W(t) = σ1(t-2) + (t-7) + σ0(t-15) + (t-16)
            messageScheduler[t] = BitwiseOperations.LowerCaseSigma1(messageScheduler[t - 2]) +
                messageScheduler[t - 7] +
                BitwiseOperations.LowerCaseSigma0(messageScheduler[t - 15]) +
                messageScheduler[t - 16];
        }
        #endregion message scheduler

        #region compression
        for (int i = 0; i < 64; i++)
        {
            //temporary word T1 = Σ1(e) + Ch(e, f, g) + h + K0 + W0
            uint T1 = BitwiseOperations.UpperCaseSigma1(e) +
                BitwiseOperations.ChoiceXYZ(e, f, g) +
                h + K[i] + messageScheduler[i];

            //temporary word T2 = Σ0(a) + Maj(a, b, c)
            uint T2 = BitwiseOperations.UpperCaseSigma0(a) +
                BitwiseOperations.MajorityXYZ(a, b, c);

            //update the working registers
            h = g;
            g = f;
            f = e;
            e = d + T1;
            d = c;
            c = b;
            b = a;
            a = T1 + T2;
        }
        #endregion compression

        //for next round or final hash
        h0 = a + h0;
        h1 = b + h1;
        h2 = c + h2;
        h3 = d + h3;
        h4 = e + h4;
        h5 = f + h5;
        h6 = g + h6;
        h7 = h + h7;
    }
    #endregion create message scheduler and compress

    //return calculated hash
    return $"{h0:x8}{h1:x8}{h2:x8}{h3:x8}{h4:x8}{h5:x8}{h6:x8}{h7:x8}";
}

___________________________


public static class BitwiseOperations
{
    //shift right
    public static uint ShiftRight(uint x, int nbitsShift)
    {
        return x >> nbitsShift;
    }

    //rotate right
    public static uint RotateRight(uint x, int nbitsShift)
    {
        return (x >> nbitsShift) | (x << (32 - nbitsShift));
    }

    //rotate left
    public static uint RotateLeft(uint x, int nbitsShift)
    {
        return (x << nbitsShift) | (x >> (32 - nbitsShift));
    }

    //XOR
    public static uint XOR(uint x, uint y)
    {
        return x ^ y;
    }

    //'lower case sigma 0' σ0
    public static uint LowerCaseSigma0(uint x)
    {
        return RotateRight(x, 7) ^ RotateRight(x, 18) ^ ShiftRight(x, 3);

        #region save this
        ////1. rotate x right 7
        //uint ROTR7 = RotateRight(x, 7);
        ////2. rotate x right 18
        //uint ROTR18 = RotateRight(x, 18);
        ////3. shift x right 3
        //uint SHR3 = ShiftRight(x, 3);
        ////4. XOR ROTR7 and ROTR18
        //uint XOR_ROTR7_ROTR18 = XOR(ROTR7, ROTR18);
        ////5. XOR XOR_ROTR7_ROTR18 and SHR3
        //return XOR(XOR_ROTR7_ROTR18, SHR3);
        #endregion save this
    }

    //'lower case sigma 1' σ1
    public static uint LowerCaseSigma1(uint x)
    {
        return RotateRight(x, 17) ^ RotateRight(x, 19) ^ ShiftRight(x, 10);

        #region save this
        ////1. rotate x right 17
        //uint ROTR17 = RotateRight(x, 17);
        ////2. rotate x right 19
        //uint ROTR19 = RotateRight(x, 19);
        ////3. shift x right 10
        //uint SHR10 = ShiftRight(x, 10);
        ////4. XOR ROTR17 and ROTR19
        //uint XOR_ROTR17_ROTR19 = XOR(ROTR17, ROTR19);
        ////5. XOR XOR_ROTR17_ROTR19 and SHR10
        //return XOR(XOR_ROTR17_ROTR19, SHR10);
        #endregion save this
    }

    //'upper case sigma 0' Σ0
    public static uint UpperCaseSigma0(uint x)
    {
        return RotateRight(x, 2) ^ RotateRight(x, 13) ^ RotateRight(x, 22);

        #region save this
        ////1. rotate x right 2
        //uint ROTR2 = RotateRight(x, 2);
        ////2. rotate x right 13
        //uint ROTR13 = RotateRight(x, 13);
        ////3. rotate x right 22
        //uint ROTR22 = RotateRight(x, 22);
        ////4. XOR ROTR2 and ROTR13
        //uint XOR_ROTR2_ROTR13 = XOR(ROTR2, ROTR13);
        ////5. XOR XOR_ROTR2_ROTR13 and ROTR22
        //return XOR(XOR_ROTR2_ROTR13, ROTR22);
        #endregion save this
    }

    //'upper case sigma 1' Σ1
    public static uint UpperCaseSigma1(uint x)
    {
        return RotateRight(x, 6) ^ RotateRight(x, 11) ^ RotateRight(x, 25);

        #region save this
        ////1. rotate x right 6
        //uint ROTR6 = RotateRight(x, 6);
        ////2. rotate x right 11
        //uint ROTR11 = RotateRight(x, 11);
        ////3. rotate x right 25
        //uint ROTR25 = RotateRight(x, 25);
        ////4. XOR ROTR6 and ROTR11
        //uint XOR_ROTR6_ROTR11 = XOR(ROTR6, ROTR11);
        ////5. XOR XOR_ROTR6_ROTR11 and ROTR25
        //return XOR(XOR_ROTR6_ROTR11, ROTR25);
        #endregion save this
    }

    // xyz choice
    public static uint ChoiceXYZ(uint x, uint y, uint z)
    {
        return ((x) & (y)) | (~x & (z));

        #region save this
        //string xString = ShowUintAsOnesAndZeroesPadLeft32(x);
        //string yString = ShowUintAsOnesAndZeroesPadLeft32(y);
        //string zString = ShowUintAsOnesAndZeroesPadLeft32(z);

        //StringBuilder stringBuilder = new StringBuilder();
        //for (int i = 31; i >= 0; i--)
        //{
        //    switch (xString[i]) //depending on x if it is '1' it takes y else if it is '0' it takes z 
        //    {
        //        case '0':
        //            stringBuilder.Insert(0, zString[i]);
        //            break;
        //        case '1':
        //            stringBuilder.Insert(0, yString[i]);
        //            break;
        //        default:
        //            break;
        //    }
        //}

        //return Convert32OnesAndZeroesToUInt(stringBuilder.ToString());
        #endregion save this
    }

    // xyz majority
    public static uint MajorityXYZ(uint x, uint y, uint z)
    {
        return ((x) & (y)) | ((x) & (z)) | ((y) & (z));

        #region save this
        //string xString = ShowUintAsOnesAndZeroesPadLeft32(x);
        //string yString = ShowUintAsOnesAndZeroesPadLeft32(y);
        //string zString = ShowUintAsOnesAndZeroesPadLeft32(z);

        //StringBuilder stringBuilder = new StringBuilder();
        //for (int i = 31; i >= 0; i--)
        //{
        //    switch (xString[i])
        //    {
        //        case '0':
        //            switch (yString[i])
        //            {
        //                case '0':
        //                    stringBuilder.Insert(0, '0'); //majority
        //                    break;
        //                case '1':
        //                    switch (zString[i])
        //                    {
        //                        case '1':
        //                            stringBuilder.Insert(0, '1'); //majority
        //                            break;
        //                        case '0':
        //                            stringBuilder.Insert(0, '0'); //majority
        //                            break;
        //                        default:
        //                            break;
        //                    }
        //                    break;
        //                default:
        //                    break;
        //            }
        //            break;
        //        case '1':
        //            switch (yString[i])
        //            {
        //                case '1':
        //                    stringBuilder.Insert(0, '1'); //majority
        //                    break;
        //                case '0':
        //                    switch (zString[i])
        //                    {
        //                        case '1':
        //                            stringBuilder.Insert(0, '1'); //majority
        //                            break;
        //                        case '0':
        //                            stringBuilder.Insert(0, '0'); //majority
        //                            break;
        //                        default:
        //                            break;
        //                    }
        //                    break;
        //                default:
        //                    break;
        //            }
        //            break;
        //        default:
        //            break;
        //    }
        //}

        //return Convert32OnesAndZeroesToUInt(stringBuilder.ToString());
        #endregion save this
    }

    //round constant cube root
    public static uint GetCalculatedRoundConstantCubeRoot(uint primenumber)
    {
        double cubeRoot = CubeRoot(primenumber);
        return (uint)((cubeRoot - (int)cubeRoot) * Math.Pow(2, 32));
    }

    //working variable square root
    public static uint GetCalculatedWorkingVariableSquareRoot(uint primenumber)
    {
        double squareRoot = SquareRoot(primenumber);
        return (uint)((squareRoot - (int)squareRoot) * Math.Pow(2, 32));
    }

    public static double CubeRoot(double x)
    {
        return Math.Pow(x, 1.0 / 3.0);
    }

    public static double SquareRoot(double x)
    {
        return Math.Pow(x, 1.0 / 2.0);
    }

    #region helpers
    //public static string ShowUintAsOnesAndZeroesPadLeft32(uint x)
    //{
    //    return Convert.ToString(x, 2).PadLeft(32, '0');
    //}

    //public static uint Convert32OnesAndZeroesToUInt(string onesAndZeroes)
    //{
    //    if (onesAndZeroes.Length != 32)
    //    {
    //        onesAndZeroes = CheckLengthPadLeft32(onesAndZeroes);
    //    }

    //    return Convert.ToUInt32(onesAndZeroes.PadLeft(32, '0'), 2);
    //}

    //public static string CheckLengthPadLeft32(string stringToCheck)
    //{
    //    if (stringToCheck.Length > 32)
    //    {
    //        stringToCheck = stringToCheck.Substring(0, 32);
    //    }

    //    if (stringToCheck.Length < 32)
    //    {
    //        stringToCheck = stringToCheck.PadLeft(32, '0');
    //    }

    //    return stringToCheck;
    //}
    #endregion helpers
}

___________________________

internal class CubeRoot64RoundConstants
{
    //SHA256 round constants
    internal static readonly uint[] K = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
    };
}

___________________________

internal class SquareRoot8WorkingVariables
{
    //working variables
    internal static readonly uint[] initialHashValue = {
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,
    };
}

___________________________

internal class SmallPrimes
{
    internal static readonly uint[] smallPrimes = {

        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
        73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,
        157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,
        239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,
        331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,
        421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,
        509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,
        613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,
        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,
        821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,
        919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997,
    };
}

___________________________

string ComputeSHA256HashUsingSystemSecurityCryptography(string rawInput)
{
    //create a SHA256   
    using (SHA256 sha256 = SHA256.Create())
    {
        //compute hash - returns byte array  
        byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(rawInput));

        //convert byte array to a string   
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < bytes.Length; i++)
        {
            stringBuilder.Append(bytes[i].ToString("x2"));
        }
        return stringBuilder.ToString();
    }
}

___________________________

updated 20210414 by Timo Kinnunen